42
q;
;
a3f3
fa
ifja3wifaw3ija3if
a
""
trunc <- hw1_data[hw1_data$Ozone > 31 & hw1_data$Temp > 90]
trunc <- hw1_data[hw1_data$Ozone > 31]
names(hw1_Data)
names(hw1_data)
trunc <- subset(x = hw1_data, Ozone>31 & Temp > 90)
summary(trun)
summary(trunc)
trunc <- subset(x = hw1_data, Month = 6)
mean(trunc$Temp)
trunc <- subset(x = hw1_data, Month = 6)
summary(trunc)
trunc <- subset(x = hw1_data, Month == 6)
summary(trunc)
trunc <- subset(x = hw1_data, Month == 5)
summary(trunc)
communities <- read.csv("~/Desktop/Data Science - Coursera/Getting and Cleaning Data/communities.csv")
View(communities)
names(communities)
attach(communities)
summary(RT)
summary(TYPE)
TYPE <- as.factor(TYPE)
summary(TYPE)
Housing <- communities[TYPE=1]
Housing <- communities[communities$TYPE=1]
Housing <- communities[TYPE==1]
Housing <- communities[communities$TYPE==1]
Housing <- subset(communities, communities$TYPE==1)
subset(communities, communities$VAL>23)
nrow(subset(communities, communities$VAL>23))
nrow(subset(communities, communities$VAL>13))
nrow(subset(communities, communities$VAL %in% 13:24))
nrow(subset(communities, communities$VAL==24))
head(communities$FES)
summary(communities$FES)
FES <- as.factor(FES)
fes
FES
summary(FES)
install.packages("xlsx")
library(xlsx)
path <- "~/Desktop/Data Science - Coursera/Getting and Cleaning Data/DATA.gov_NGAP.xlsx"
data <- read.xlsx(path)
path <- "~/Desktop/Data Science - Coursera/Getting and Cleaning Data/DATA.gov_NGAP.xlsx"
rowIndex=18:23
colIndex=7:15
data <- read.xlsx(path,sheetIndex=1,colIndex=colIndex,rowIndex=rowIndex)
View(data)
View(data)
sum(data$Zip*data$Ext,na.rm=T)
install.packages("XML")
library(xml)
fileURL <- https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml
doc <- xmlTreeParse(fileURL,useInternal=TRUE)
library(xml)
library(XML)
fileURL <- https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml
doc <- xmlTreeParse(fileURL,useInternal=TRUE)
fileURL <- https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml
source('~/.active-rstudio-document')
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileURL,useInternal=TRUE)
doc <- xmlTreeParse(fileURL)
library(XML)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileURL)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
fileURL
doc <- xmlTreeParse(fileURL)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
xmlNativeTreeParse(url)
library(XML)
require(XML)
data <- xmlParse("http://forecast.weather.gov/MapClick.php?lat=29.803&lon=-82.411&FcstType=digitalDWML")
xml_data <- xmlToList(data)
doc <- xmlParse(fileURL)
xmlParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
library(RCurl)
xData <- getURL("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
xData <- xmlParse("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
xmlRoot(xData)
rootNode <- xmlRoot(xData)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[1]][[1]]
rootNode[[1]][[1]][[1]]
xData <- xmlParse("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml",useInternalNodes = TRUE)
rootNode <- xmlRoot(xData)
rootNode[[1]][[1]]
xmlToDataFrame(rootNode)
t <- xmlToDataFrame(rootNode)
acs <- read.csv("~/Desktop/Data Science - Coursera/Getting and Cleaning Data/acs.csv")
View(acs)
dt <- read.csv("~/Desktop/Data Science - Coursera/Getting and Cleaning Data/acs.csv")
View(acs)
Sys.time()
DT[,mean(pwgtp15),by=SEX]
Sys.time()
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
Sys.time()
sapply(split(DT$pwgtp15,DT$SEX),mean)
Sys.time()
tapply(DT$pwgtp15,DT$SEX,mean)
Sys.time()
mean(DT$pwgtp15,by=DT$SEX)
Sys.time()
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
Sys.time()
DT <- dt
Sys.time()
DT[,mean(pwgtp15),by=SEX]
Sys.time()
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
Sys.time()
sapply(split(DT$pwgtp15,DT$SEX),mean)
Sys.time()
tapply(DT$pwgtp15,DT$SEX,mean)
Sys.time()
mean(DT$pwgtp15,by=DT$SEX)
Sys.time()
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
Sys.time()
DT[,mean(pwgtp15),by=SEX]
input <- "~/Desktop/Data Science - Coursera/Getting and Cleaning Data/acs.csv"
t <- fread(input, skip=1, header=TRUE)
install.packages("data.table")
library(data.table)
t <- fread(input, skip=1, header=TRUE)
View(t)
t <- fread(input, skip=1, header=FALSE)
head(t)
t <- fread(input, sep = ",", header = TRUE)
Sys.time()
DT[,mean(pwgtp15),by=SEX]
Sys.time()
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
Sys.time()
sapply(split(DT$pwgtp15,DT$SEX),mean)
Sys.time()
tapply(DT$pwgtp15,DT$SEX,mean)
Sys.time()
mean(DT$pwgtp15,by=DT$SEX)
Sys.time()
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
Sys.time()
DT$SEX <- as.numeric(DT$SEX)
Sys.time()
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
Sys.time()
library(data.table)
input <- "~/Desktop/Data Science - Coursera/Getting and Cleaning Data/acs.csv"
t <- fread(input, sep = ",", header = TRUE)
Sys.time()
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
Sys.time()
Sys.time()
sapply(split(DT$pwgtp15,DT$SEX),mean)
Sys.time()
Sys.time()
tapply(DT$pwgtp15,DT$SEX,mean)
Sys.time()
Sys.time()
mean(DT$pwgtp15,by=DT$SEX)
Sys.time()
DT$SEX <- as.numeric(DT$SEX)
Sys.time()
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
Sys.time()
library(data.table)
input <- "~/Desktop/Data Science - Coursera/Getting and Cleaning Data/acs.csv"
DT <- fread(input, sep = ",", header = TRUE)
Sys.time()
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
Sys.time()
Sys.time()
sapply(split(DT$pwgtp15,DT$SEX),mean)
Sys.time()
Sys.time()
tapply(DT$pwgtp15,DT$SEX,mean)
Sys.time()
Sys.time()
mean(DT$pwgtp15,by=DT$SEX)
Sys.time()
DT$SEX <- as.numeric(DT$SEX)
Sys.time()
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
Sys.time()
DT$SEX <- as.numeric(DT$SEX)
Sys.time()
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
Sys.time()
Sys.time()
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
Sys.time()
Sys.time()
sapply(split(DT$pwgtp15,DT$SEX),mean)
Sys.time()
Sys.time()
tapply(DT$pwgtp15,DT$SEX,mean)
Sys.time()
Sys.time()
mean(DT$pwgtp15,by=DT$SEX)
Sys.time()
DT$SEX <- as.numeric(DT$SEX)
Sys.time()
Sys.time()
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
Sys.time()
Sys.time()
sapply(split(DT$pwgtp15,DT$SEX),mean)
Sys.time()
Sys.time()
tapply(DT$pwgtp15,DT$SEX,mean)
Sys.time()
Sys.time()
mean(DT$pwgtp15,by=DT$SEX)
Sys.time()
DT$SEX <- as.numeric(DT$SEX)
Sys.time()
ptm <- proc.time()
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)  # 1
proc.time()-ptm
ptm <- proc.time()
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)  # 1
proc.time()-ptm
ptm <- proc.time()
sapply(split(DT$pwgtp15,DT$SEX),mean)                       #
proc.time()-ptm
ptm <- proc.time()
tapply(DT$pwgtp15,DT$SEX,mean)
proc.time()-ptm
ptm <- proc.time()
mean(DT$pwgtp15,by=DT$SEX)
proc.time()-ptm
ptm <- proc.time()
DT$SEX <- as.numeric(DT$SEX)
proc.time()-ptm
ptm <- proc.time()
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)  # 1
proc.time()-ptm
ptm <- proc.time()
sapply(split(DT$pwgtp15,DT$SEX),mean)                       #
proc.time()-ptm
ptm <- proc.time()
tapply(DT$pwgtp15,DT$SEX,mean)
proc.time()-ptm
ptm <- proc.time()
mean(DT$pwgtp15,by=DT$SEX)
proc.time()-ptm
ptm <- proc.time()
DT$SEX <- as.numeric(DT$SEX)
proc.time()-ptm
ptm <- proc.time()
DT[,mean(pwgtp15),by=SEX]
proc.time()-ptm
ptm <- proc.time()
DT[,mean(pwgtp15),by=SEX]                                   # 0.004   0.001   0.006
proc.time()-ptm
ptm <- proc.time()
DT[,mean(pwgtp15),by=SEX]                                   # 0.004   0.001   0.006
proc.time()-ptm
ptm <- proc.time()
DT[,mean(pwgtp15),by=SEX]                                   # 0.004   0.001   0.006
proc.time()-ptm
ptm <- proc.time()
DT[,mean(pwgtp15),by=SEX]                                   # 0.004   0.001   0.006
proc.time()-ptm
ptm <- proc.time()
DT[,mean(pwgtp15),by=SEX]                                   # 0.004   0.001   0.006
proc.time()-ptm
ptm <- proc.time()
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)  # 0.046   0.001   0.048
proc.time()-ptm
ptm <- proc.time()
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)  # 0.046   0.001   0.048
proc.time()-ptm
ptm <- proc.time()
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)  # 0.046   0.001   0.048
proc.time()-ptm
ptm <- proc.time()
sapply(split(DT$pwgtp15,DT$SEX),mean)                       # 0.012   0.001   0.014
proc.time()-ptm
ptm <- proc.time()
sapply(split(DT$pwgtp15,DT$SEX),mean)                       # 0.012   0.001   0.014
proc.time()-ptm
ptm <- proc.time()
tapply(DT$pwgtp15,DT$SEX,mean)                              # 0.017   0.000   0.017
proc.time()-ptm
ptm <- proc.time()
tapply(DT$pwgtp15,DT$SEX,mean)                              # 0.017   0.000   0.017
proc.time()-ptm
ptm <- proc.time()
mean(DT$pwgtp15,by=DT$SEX)                                  # 0.001   0.000   0.002
proc.time()-ptm
ptm <- proc.time()
mean(DT$pwgtp15,by=DT$SEX)                                  # 0.001   0.000   0.002
proc.time()-ptm
ptm <- proc.time()
mean(DT$pwgtp15,by=DT$SEX)                                  # 0.001   0.000   0.002
proc.time()-ptm
ptm <- proc.time()
DT$SEX <- as.numeric(DT$SEX)                                #    0.039   0.004   0.043
proc.time()-ptm
ptm <- proc.time()
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
proc.time()-ptm
DT$SEX <- as.numeric(DT$SEX)
ptm <- proc.time()
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
proc.time()-ptm
ptm <- proc.time()
tapply(DT$pwgtp15,DT$SEX,mean)                              # 0.017   0.000   0.017
proc.time()-ptm
ptm <- proc.time()
mean(DT$pwgtp15,by=DT$SEX)                                  # 0.001   0.000   0.002
proc.time()-ptm
ptm <- proc.time()
tapply(DT$pwgtp15,DT$SEX,mean)                              # 0.017   0.000   0.017
proc.time()-ptm
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
html = readLines(con)
close(con)
html
html[10]
nchar(html[10])
nchar(html[20])
nchar(html[30])
nchar(html[100])
setwd("~/Desktop/Data Science - Coursera/Exploratory Data Analysis/Project1")
## First load all of the data
data_full <- read.csv("household_power_consumption.txt", header=T, sep=';', na.strings="?",
nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data <- read.csv("household_power_consumption.txt", header=T, sep=';', na.strings="?",
nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
## Subset to proper dates
data_full$Date <- as.Date(data_full$Date, format="%d/%m/%Y")
data <- subset(data_full, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(data_full)
## First load all of the data
data_full <- read.csv("household_power_consumption.txt", header=T, sep=';', na.strings="?",
nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data_full$Date <- as.Date(data_full$Date, format="%d/%m/%Y")
data <- subset(data_full, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(data_full)
datetime <- paste(as.Date(data$Date), data$Time)
data$DateTime <- as.POSIXct(datetime)
## Plot 1
hist(data$Global_active_power, main="Global Active Power",
xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Red")
## Saving to file
dev.copy(png, file="plot1.png", height=480, width=480)
dev.off()
source("GetData.R")
## Plot 1
hist(data$Global_active_power, main="Global Active Power",
xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Red")
## Saving to file
dev.copy(png, file="plot1.png", height=480, width=480)
dev.off()
## Plot 2
plot(data$Global_active_power~data$DateTime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
dev.copy(png, file="plot2.png", height=480, width=480)
dev.off()
## Plot 3
with(data, {
plot(Sub_metering_1~DateTime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~DateTime,col='Red')
lines(Sub_metering_3~DateTime,col='Blue')
})
legend("topright", col=c("Black", "Red", "Blue"), lty=1, lwd=2,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
## Saving to file
dev.copy(png, file="plot3.png", height=480, width=480)
dev.off()
## Plot 4
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
with(data, {
plot(Global_active_power~DateTime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
plot(Voltage~DateTime, type="l",
ylab="Voltage (volt)", xlab="")
plot(Sub_metering_1~DateTime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~DateTtime,col='Red')
lines(Sub_metering_3~DateTime,col='Blue')
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, bty="n",
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(Global_reactive_power~DateTime, type="l",
ylab="Global Rective Power (kilowatts)",xlab="")
})
## Saving to file
dev.copy(png, file="plot4.png", height=480, width=480)
dev.off()
with(data, {
plot(Global_active_power~DateTime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
plot(Voltage~DateTime, type="l",
ylab="Voltage (volt)", xlab="")
plot(Sub_metering_1~DateTime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~DateTime,col='Red')
lines(Sub_metering_3~DateTime,col='Blue')
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, bty="n",
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(Global_reactive_power~DateTime, type="l",
ylab="Global Rective Power (kilowatts)",xlab="")
})
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
with(data, {
plot(Global_active_power~DateTime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
plot(Voltage~DateTime, type="l",
ylab="Voltage (volt)", xlab="")
plot(Sub_metering_1~DateTime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~DateTime,col='Red')
lines(Sub_metering_3~DateTime,col='Blue')
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, bty="n",
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(Global_reactive_power~DateTime, type="l",
ylab="Global Rective Power (kilowatts)",xlab="")
})
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
with(data, {
plot(Global_active_power~DateTime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
plot(Voltage~DateTime, type="l",
ylab="Voltage (volt)", xlab="")
plot(Sub_metering_1~DateTime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~DateTime,col='Red')
lines(Sub_metering_3~DateTime,col='Blue')
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, bty="n",
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(Global_reactive_power~DateTime, type="l",
ylab="Global Rective Power (kilowatts)",xlab="")
})
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
with(data, {
plot(Global_active_power~DateTime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
plot(Voltage~DateTime, type="l",
ylab="Voltage (volt)", xlab="")
plot(Sub_metering_1~DateTime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~DateTime,col='Red')
lines(Sub_metering_3~DateTime,col='Blue')
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, bty="o",
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(Global_reactive_power~DateTime, type="l",
ylab="Global Rective Power (kilowatts)",xlab="")
})
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
with(data, {
plot(Global_active_power~DateTime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
plot(Voltage~DateTime, type="l",
ylab="Voltage (volt)", xlab="")
plot(Sub_metering_1~DateTime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~DateTime,col='Red')
lines(Sub_metering_3~DateTime,col='Blue')
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, bty="n", cex=.8,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(Global_reactive_power~DateTime, type="l",
ylab="Global Rective Power (kilowatts)",xlab="")
})
## Plot 4
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
with(data, {
plot(Global_active_power~DateTime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
plot(Voltage~DateTime, type="l",
ylab="Voltage (volt)", xlab="")
plot(Sub_metering_1~DateTime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~DateTime,col='Red')
lines(Sub_metering_3~DateTime,col='Blue')
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, bty="n", cex=.6,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(Global_reactive_power~DateTime, type="l",
ylab="Global Rective Power (kilowatts)",xlab="")
})
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
with(data, {
plot(Global_active_power~DateTime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
plot(Voltage~DateTime, type="l",
ylab="Voltage (volt)", xlab="")
plot(Sub_metering_1~DateTime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~DateTime,col='Red')
lines(Sub_metering_3~DateTime,col='Blue')
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, bty="n", cex=.65,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(Global_reactive_power~DateTime, type="l",
ylab="Global Rective Power (kilowatts)",xlab="")
})
## Saving to file
dev.copy(png, file="plot4.png", height=480, width=480)
dev.off()
